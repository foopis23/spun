generator client {
  provider = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

// for dev
// datasource db {
//   provider = "postgresql"
//   url = env("DATABASE_URL")
// }

datasource db {
    provider = "postgresql"
    url = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
    shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  bio           String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Post          Post[]
  PostReactions Reaction[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id        String @id @default(uuid())
  content   String
  authorId  String
  author    User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  reactions  Reaction[]

  @@index(fields: [authorId])
}

model Reaction {
  id        String @id @default(uuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())
  type      ReactionType @default(LIKE)

  @@unique([postId, userId])

  Post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  User User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index(fields: [postId, userId])
}

enum ReactionType {
  LIKE
  DISLIKE
}
